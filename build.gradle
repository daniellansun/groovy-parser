/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
buildscript {
    repositories {
        if (rootProject.hasProperty('buildInChina')) {
            // Try to use Aliyun maven repository when building in China
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        }
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }
}

plugins {
    id 'com.gradle.build-scan' version '3.6.3'
    id 'me.champeau.buildscan-recipes' version '0.2.3'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlways()
}

buildScanRecipes {
    recipe 'git-commit', baseUrl: 'https://github.com/danielsun1106/groovy-parser/commits/master'
    recipes 'git-status', 'gc-stats', 'travis-ci'
}

group 'me.sunlan'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'antlr'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
//    options.fork = true
//    options.forkOptions.jvmArgs += ["-Duser.language=en"]
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = 'UTF-8'
}

repositories {
    if (rootProject.hasProperty('buildInChina')) {
        // Try to use Aliyun maven repository when building in China
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    }

    jcenter()
    mavenCentral()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.jfrog.org/oss-snapshot-local/' }
}

generateGrammarSource {
    maxHeapSize = '1g'
    outputs.cacheIf { true }

    final PARSER_PACKAGE_NAME = 'org.apache.groovy.parser.antlr4'
    arguments += ["-visitor", "-no-listener", "-package", PARSER_PACKAGE_NAME]

    doLast {
        def parserFilePattern = 'Groovy*'
        def outputPath = generateGrammarSource.outputDirectory.canonicalPath
        def parserPackagePath = "${outputPath}/${PARSER_PACKAGE_NAME.replace('.', '/')}"
        file(parserPackagePath).mkdirs()
        copy {
            from outputPath
            into parserPackagePath
            include parserFilePattern
        }
        delete fileTree(outputPath) {
            include parserFilePattern
        }
    }
}

task antlr(dependsOn: generateGrammarSource) // alias for generateGrammarSource
compileJava.dependsOn antlr


ext {
    asmVersion = '9.1'
    antlr4Version = '4.9.0'
//    groovyVersion = '3.0.0-SNAPSHOT'
    groovyVersion = '3.0.8'
    junitVersion = '4.13.2'
}

dependencies {
    antlr "com.tunnelvisionlabs:antlr4:$antlr4Version"

    compile "org.ow2.asm:asm:$asmVersion"
    compile "org.ow2.asm:asm-analysis:$asmVersion"
    compile "org.ow2.asm:asm-commons:$asmVersion"
    compile "org.ow2.asm:asm-tree:$asmVersion"
    compile "org.ow2.asm:asm-util:$asmVersion"

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "junit:junit:$junitVersion"
}

wrapper {
    gradleVersion = '5.6.4'
}

test {
    def commonJvmArgs = ['-ea', "-Xms512m", "-Xmx2g", "-XX:MaxMetaspaceSize=512m", "-XX:+UseG1GC", "-XX:+UnlockDiagnosticVMOptions", "-XX:+DebugNonSafepoints", "-Dgroovy.antlr4.cache.threshold=150", "-Dgroovy.permissive.property.access=true", "-Duser.language=en"]
    if (rootProject.hasProperty('async.profiler.agentpath')) {
        commonJvmArgs << "-agentpath:${rootProject.property('async.profiler.agentpath')}=start,event=cpu,width=3600,file=build/reports/profile-${System.nanoTime()}.svg"
    }
    jvmArgs(*commonJvmArgs)

    def headless = System.properties['java.awt.headless']
    if (headless == 'true') {
        systemProperties 'java.awt.headless': 'true'
    }

    forkEvery = 0
    maxParallelForks = isRunningOnCI() ? 1 : Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    ignoreFailures = false

    testLogging {
        events /*"passed",*/ "skipped", "failed", "standardOut" /*, "standardError"*/

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results for ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped), forkEvery: ${forkEvery}, maxParallelForks: ${maxParallelForks}"
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

logger.lifecycle "Detected ${isRunningOnCI() ? 'Continuous Integration environment' : 'development environment'}"

boolean isRunningOnCI() {
    new File('.').absolutePath =~ /teamcity|jenkins|hudson|travis|circleci|ubuntu/
}
