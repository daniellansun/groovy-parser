/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()

        maven { url 'http://dl.bintray.com/melix/gradle-javadoc-hotfix-plugin' }
    }

    dependencies {
        classpath files("lib/antlr4-gradle-plugin-0.1.2-SNAPSHOT.jar");
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'jacoco'
}

group 'com.groovyhelp'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'me.champeau.gradle.antlr4'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()

    maven { url 'https://oss.jfrog.org/oss-snapshot-local/' }
}

def srcBase = "src"
def srcMain = "$srcBase/main"
def srcTest = "$srcBase/test"
def antlr4Source = "$srcMain/antlr4"
def antlr4OutputRootDir = "$srcMain/generated-sources"
def antlr4Output = "$antlr4OutputRootDir/org/apache/groovy/parser/antlr4"

antlr4 {
    source = file(antlr4Source)
    extraArgs = ["-no-listener", "-package", "org.apache.groovy.parser.antlr4"]
    output = file(antlr4Output)
}

compileJava.options.encoding = 'UTF-8'

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add antlr4 to classpath
configurations {
    compile.extendsFrom antlr4
}

task cleanGeneratedSources(type: Delete) {
    delete antlr4OutputRootDir
    file(antlr4OutputRootDir).mkdirs()
}

clean.dependsOn cleanGeneratedSources
antlr4.dependsOn clean

ext {
    asmVersion = '6.0_ALPHA'
    antlr4Version = '4.6.0.3'
//    groovyVersion = '2.5.0-SNAPSHOT'
    junitVersion = '4.12'
//    checkerVersion = '2.1.12'
}

dependencies {
//    antlr4 "org.antlr:antlr4:$antlr4Version"
    antlr4 "com.tunnelvisionlabs:antlr4:$antlr4Version"
//    antlr4 files("lib/antlr4.jar")
//    compile 'org.abego.treelayout:org.abego.treelayout.core:1.0.3'

    compile "org.ow2.asm:asm:$asmVersion"
    compile "org.ow2.asm:asm-analysis:$asmVersion"
    compile "org.ow2.asm:asm-commons:$asmVersion"
    compile "org.ow2.asm:asm-tree:$asmVersion"
    compile "org.ow2.asm:asm-util:$asmVersion"

//    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile files("lib/groovy-all-3.0.0-SNAPSHOT.jar")

    testCompile "junit:junit:$junitVersion"
//    testCompile "org.checkerframework:checker:$checkerVersion"
}

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += file("$antlr4OutputRootDir");
sourceSets.main.resources.srcDirs += file("$antlr4Source");
sourceSets.main.java.srcDirs += file("$srcMain/groovy-sources");
sourceSets.test.java.srcDirs += file("$srcTest/groovy-sources");


task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

task groovyConsole(type: JavaExec, dependsOn:[classes]) {
    if (JavaVersion.current().isJava8Compatible()) {
        jvmArgs '-ea', "-Xms256m", "-Xmx512m", "-Dgroovy.antlr4=true", "-Dgroovy.attach.groovydoc=true"
    } else {
        jvmArgs '-ea', "-Xms256m", "-Xmx512m", "-XX:PermSize=64m", "-XX:MaxPermSize=192m", "-Dgroovy.antlr4=true", "-Dgroovy.attach.groovydoc=true"
    }

    main = 'org.apache.groovy.parser.antlr4.ui.GroovyConsole'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    if (JavaVersion.current().isJava8Compatible()) {
        jvmArgs '-ea', "-Xms256m", "-Xmx512m", "-Dgroovy.antlr4.cache.threshold=100", "-Dgroovy.attach.groovydoc=true"
    } else {
        jvmArgs '-ea', "-Xms256m", "-Xmx512m", "-XX:PermSize=64m", "-XX:MaxPermSize=192m", "-Dgroovy.antlr4.cache.threshold=100", "-Dgroovy.attach.groovydoc=true"
    }

    def headless = System.properties['java.awt.headless']
    if (headless == 'true') {
        systemProperties 'java.awt.headless': 'true'
    }

    forkEvery = 50
    maxParallelForks = isRunningOnCI() ? 1 : Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    ignoreFailures = false

    testLogging {
        events "passed", "skipped", "failed", "standardOut" /*, "standardError"*/

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results for ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

logger.lifecycle "Detected ${isRunningOnCI() ? 'Continuous Integration environment' : 'development environment'}"

jacoco {
    toolVersion = '0.7.6.201602180812'
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

boolean isRunningOnCI() {
    new File('.').absolutePath =~ /teamcity|jenkins|hudson|travis|ubuntu/
}

