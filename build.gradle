/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.8'
    id 'me.champeau.buildscan-recipes' version '0.2.0'

    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'jacoco'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
    publishAlways()

}

buildScanRecipes {
    recipe 'git-commit', baseUrl: 'https://github.com/danielsun1106/groovy-parser/commits/master'
    recipes 'git-status', 'gc-stats', 'travis-ci'
}

group 'com.groovyhelp'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'antlr'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()

    maven { url 'https://oss.jfrog.org/oss-snapshot-local/' }
}

final PARSER_PACKAGE_NAME = 'org.apache.groovy.parser.antlr4'
generateGrammarSource {
    arguments += ["-visitor", "-no-listener", "-package", PARSER_PACKAGE_NAME]

    doLast {
        def parserFilePattern = 'Groovy*'
        def outputPath = generateGrammarSource.outputDirectory.canonicalPath
        def parserPackagePath = "${outputPath}/${PARSER_PACKAGE_NAME.replace('.', '/')}"
        file(parserPackagePath).mkdirs()
        copy {
            from outputPath
            into parserPackagePath
            include parserFilePattern
        }
        delete fileTree(outputPath) {
            include parserFilePattern
        }
    }
}

generateGrammarSource.dependsOn clean
compileJava.dependsOn generateGrammarSource
compileJava.options.encoding = 'UTF-8'


ext {
    asmVersion = '6.0'
    antlr4Version = '4.7'
//    groovyVersion = '3.0.0-SNAPSHOT'
    groovyVersion = '3.0.0-alpha-1'
    junitVersion = '4.12'
}

dependencies {
    antlr "com.tunnelvisionlabs:antlr4:$antlr4Version"

    compile "org.ow2.asm:asm:$asmVersion"
    compile "org.ow2.asm:asm-analysis:$asmVersion"
    compile "org.ow2.asm:asm-commons:$asmVersion"
    compile "org.ow2.asm:asm-tree:$asmVersion"
    compile "org.ow2.asm:asm-util:$asmVersion"

    /*
    if (isRunningOnCI()) {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    } else {
        compile files("lib/groovy-all-${groovyVersion}.jar")
    }
    */
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
//    compile files("lib/groovy-all-${groovyVersion}.jar")

    testCompile "junit:junit:$junitVersion"
}

def srcBase = "src"
def srcMain = "$srcBase/main"
def srcTest = "$srcBase/test"

sourceSets.main.java.srcDirs += file("$srcMain/groovy-sources")
sourceSets.test.java.srcDirs += file("$srcTest/groovy-sources")


task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task groovyConsole(type: JavaExec, dependsOn:[classes]) {
    jvmArgs '-ea', "-Xms256m", "-Xmx512m", "-Dgroovy.antlr4=true", "-Dgroovy.attach.groovydoc=true"

    main = 'org.apache.groovy.parser.antlr4.ui.GroovyConsole'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    jvmArgs '-ea', "-Xms512m", "-Xmx1g", "-XX:+UseConcMarkSweepGC", "-Dgroovy.antlr4.cache.threshold=150", "-Dgroovy.attach.groovydoc=true"

    def headless = System.properties['java.awt.headless']
    if (headless == 'true') {
        systemProperties 'java.awt.headless': 'true'
    }

    forkEvery = 50
    maxParallelForks = isRunningOnCI() ? 1 : Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    ignoreFailures = false

    testLogging {
        events /*"passed",*/ "skipped", "failed", "standardOut" /*, "standardError"*/

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results for ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

logger.lifecycle "Detected ${isRunningOnCI() ? 'Continuous Integration environment' : 'development environment'}"

jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

boolean isRunningOnCI() {
    new File('.').absolutePath =~ /teamcity|jenkins|hudson|travis|ubuntu/
}

